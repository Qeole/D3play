// vim: set ts=2 sw=2:
function viv () {
  var figPath = [
    /* 0 */
    "m -1.5,0.1 c 0.76,0 1.64,1.24 1.64,4.76 0,4.82 -0.92,5.88 -1.72,5.88 -1.68,0 -1.66,-3.38 -1.66,-5.08 0,-4.86 0.94,-5.56 1.74,-5.56 m -0.1,11.5 c 1.98,0 4.58,-1.58 4.58,-6.34 0,-4.7 -2.48,-6.06 -4.48,-6.06 -2.58,0 -4.6,2.24 -4.6,6.24 0,3.28 1.58,6.16 4.5,6.16",
    /* 1 */
    "m 0,7.62 m 0,-5.06 c 0,-2.16 0.18,-2.98 0.22,-3.26 0,-0.1 -0.06,-0.1 -0.14,-0.1 -1.30,0.42 -3.52,1.08 -5.38,1.5 l 0.04,0.86 c 0.88,-0.12 1.78,-0.12 2.18,-0.12 0.34,0 0.36,0.58 0.36,1.3 l 0,4.88 c 0,1.56 -0.04,2.66 -0.22,3.78 l 0.02,0.06 c 0,0 0.8,-0.06 1.54,-0.06 0.72,0 1.58,0.06 1.58,0.06 l 0.04,-0.06 c -0.18,-1.2 -0.24,-2.2 -0.24,-3.78 z",
    /* 2 */
    "m -2,0.28 c 0.72,0 1.52,0.8 1.52,2.04 0,1.28 -0.06,2.32 -1.24,3.52 l -1.48,1.46 c -1.96,2 -2.56,2.92 -2.56,4.1 l 0.02,0.08 c 1.94,-0.02 3.46,-0.08 4.98,-0.08 1.50,0 1.98,0.02 3.48,0.08 -0.06,-0.26 -0.12,-0.68 -0.12,-0.94 0,-0.26 0.06,-1.06 0.12,-1.32 -1.16,0.08 -1.72,0.18 -3.72,0.18 l -1.64,0 c 0,-0.32 0.72,-1.32 1.14,-1.72 l 2,-1.94 c 1.14,-1.1 2.12,-1.88 2.12,-3.4 0,-2.16 -2.08,-3.14 -4.46,-3.14 -1.44,0 -3.22,0.66 -3.72,1.1 l -0.06,0.08 0.42,1.58 0.88,0.02 c 0.66,-1.18 1.34,-1.7 2.32,-1.7",
    /* 3 */
    "m -2,10.78 c -1.50,0 -1.56,-0.8 -2.22,-1.98 l -0.88,0.02 -0.44,1.58 0.08,0.1 c 0.50,0.44 1.54,1.12 3.42,1.12 2.86,0 5.12,-1.38 5.12,-3.82 0,-1.92 -1.68,-2.78 -3.16,-2.92 l 0,-0.06 c 1.46,-0.38 2.58,-1.38 2.58,-3.06 0,-1.88 -1.56,-2.56 -4,-2.56 -1.76,0 -3.24,0.68 -3.74,1.12 l -0.06,0.08 0.42,1.58 0.88,0.02 c 0.58,-1.22 0.96,-1.96 2.32,-1.96 0.78,0 1.64,0.98 1.64,2.04 0,1.66 -1.12,2.54 -3.16,2.68 l 0,0.8 c 0.24,-0.04 0.8,-0.04 0.98,-0.04 1.14,0 2.26,0.44 2.26,2.34 0,2.32 -1.34,2.92 -2.04,2.92",
    /* 4 */
    "m -1.5,1.44 m 0,5.78 -3.7,0 c 1.00,-1.68 2.64,-4.34 3.7,-5.78 z m 0,-5.78 m 0,6.72 c 0,1.28 -0.06,2.26 -0.2,3.24 l 0.02,0.06 c 0,0 0.74,-0.06 1.4,-0.06 0.64,0 1.44,0.06 1.44,0.06 l 0.04,-0.06 c -0.14,-1.06 -0.2,-1.96 -0.22,-3.24 l 1.68,0 c 0.28,0 0.58,-0.38 0.58,-0.62 0,-0.2 -0.08,-0.32 -0.3,-0.32 l -1.96,0 c 0,0 0,-7.68 0.04,-7.98 l -0.04,-0.04 c -0.74,0.06 -1.66,0.04 -2.06,0 -1.32,1.94 -3.52,5.26 -5.16,7.74 -0.04,0.08 -0.14,0.2 -0.14,0.26 0,0.08 0.26,0.24 0.38,0.46 l 0.3,0.36 c 0.1,0.1 0.18,0.14 0.66,0.14 l 3.54,0",
    /* 5 */
    "m -2.5,11.6 c 2.4,0 4.48,-1.72 4.48,-4.32 0,-1.04 -0.54,-2.04 -1.28,-2.62 -0.66,-0.52 -1.64,-0.86 -2.56,-0.86 -1.10,0 -1.94,0.12 -2.38,0.28 l 0.14,-2.94 c 0.68,0.08 1.8,0.16 2.72,0.16 0.6,0 1.92,-0.04 2.74,-0.12 l 0.3,-1.92 -0.12,-0.06 c -1.14,0.12 -2.88,0.22 -3.94,0.22 -0.74,0 -2.14,-0.14 -2.84,-0.2 l -0.04,0.06 c 0.24,0.86 0,5.54 -0.3,6.26 l 0.48,0.14 c 0.68,-0.54 1.14,-0.82 2.12,-0.82 0.5,0 0.92,0.18 1.24,0.4 0.66,0.48 0.88,1.36 0.88,2.58 0,1.96 -1.1,2.78 -2,2.78 -1.18,0 -1.78,-0.44 -2.44,-1.62 l -0.68,0.02 -0.42,1.58 0.06,0.1 c 0.82,0.7 1.94,0.9 3.84,0.9",
    /* 6 */
    "m -4,5.62 c 0.76,-0.46 1.12,-0.52 1.48,-0.52 1.16,0 1.96,1.4 1.96,2.58 0,2.16 -0.64,3.14 -1.36,3.14 -1,0 -2.1,-0.78 -2.1,-4.26 0,-0.22 0,-0.72 0.02,-0.94 m 5.58,-5.6 c 0.06,-0.24 0.02,-0.62 -0.12,-0.82 -2.82,0.1 -4.32,0.64 -5.84,1.94 -1.54,1.32 -2.16,3.42 -2.16,5.34 0,4.28 2.36,5.12 4.38,5.12 3.12,0 4.28,-2.5 4.28,-4.28 0,-0.98 -0.7,-3.14 -3.96,-3.22 -0.48,0.06 -1.34,0.32 -2.06,0.7 0.16,-1.44 0.82,-2.8 1.78,-3.58 1.18,-0.96 2.56,-1.14 3.7,-1.2",
    /* 7 */
    "m -0.5,1.48 c -1.5,3.72 -3.62,7.14 -4.9,10.04 l 0.06,0.14 2.36,-0.08 c 1.14,-3.4 2.28,-6.48 4.52,-11.92 l -0.28,-0.4 c -0.3,0.08 -0.66,0.16 -1.28,0.16 -2.98,0 -5.56,-0.08 -6.4,-0.2 0.04,0.3 0.1,0.78 0.1,1.08 0,0.3 -0.06,1.18 -0.1,1.48 2.56,-0.14 4.74,-0.3 5.92,-0.3",
    /* 8 */
    "m -2,0 c 1.12,0 1.54,0.96 1.54,1.88 0,1.08 -0.7,1.64 -1.2,2.04 l -0.58,-0.34 c -0.84,-0.48 -1.28,-1.3 -1.28,-1.92 0,-0.92 0.48,-1.66 1.52,-1.66 m 3.76,1.72 c 0,-1.54 -1.52,-2.52 -3.64,-2.52 -2.4,0 -3.9,1.26 -3.9,2.94 0,1.12 0.58,2.08 1.78,2.74 l 0.36,0.2 c -1.7,0.9 -2.76,1.88 -2.76,3.4 0,2.04 2.16,3.12 4.22,3.12 0.98,0 2.34,-0.2 3.02,-0.64 1.06,-0.7 1.5,-1.66 1.5,-2.78 0,-1.16 -0.78,-2.4 -1.76,-3.08 l -1.18,-0.7 c 1.54,-0.64 2.36,-1.4 2.36,-2.68 m -3.9,9.08 c -0.84,0 -1.76,-0.86 -1.76,-2.32 0,-0.96 0.12,-2.02 1.32,-2.92 l 0.86,0.46 c 1.16,0.76 1.52,1.42 1.52,2.56 0,1.9 -0.92,2.22 -1.94,2.22",
    /* 9 */
    "m -0,5.18 c -0.78,0.48 -1.12,0.52 -1.48,0.52 -1.16,0 -1.96,-1.38 -1.96,-2.58 0,-2.16 0.64,-3.14 1.36,-3.14 1,0 2.1,0.78 2.1,4.26 0,0.22 0,0.72 -0.02,0.94 m -5.58,5.6 c -0.08,0.26 -0.04,0.64 0.12,0.82 2.82,-0.08 4.32,-0.62 5.84,-1.94 1.52,-1.3 2.16,-3.42 2.16,-5.34 0,-4.28 -2.36,-5.12 -4.38,-5.12 -3.12,0 -4.28,2.52 -4.28,4.28 0,0.98 0.68,3.16 3.96,3.22 0.48,-0.06 1.32,-0.3 2.04,-0.68 -0.14,1.44 -0.82,2.8 -1.76,3.56 -1.18,0.96 -2.56,1.14 -3.7,1.2"
  ];
  var style="fill:none; stroke:#000000; stroke-width:0.6;";
  var transform="scale(3)";

  var time = [];
  function getTime() {
    var date = new Date ();
    var secs = date.getSeconds();
    var mins = date.getMinutes();
    var hrs  = date.getHours();
    time = [ ~~(hrs  / 10), hrs  % 10
            ,~~(mins / 10), mins % 10
            ,~~(secs / 10), secs % 10
    ];
  }

  var loop;

  var svgSecs;
  var svgMins;
  var svgHrs;

  var vivusSecs;
  var vivusMins;
  var vivusHrs;

  var xOffset = 12;
  var yOffset = 3;

  function drawSecs () {
    getTime();
    svgSecs.selectAll("path")
        .data(time.slice(4, 6))
        .attr("d", (d, i) => {
          return "m "+(i*xOffset+xOffset)+","+yOffset  + figPath[d];
        })
      .enter().append("path")
        .attr("style", style)
        .attr("transform", transform)
        .attr("d", (d, i) => {
          return "m "+(i*xOffset+xOffset)+","+yOffset  + figPath[d];
        });

    vivusSecs = new Vivus('vivus-secs', {type: 'async', duration: 30, start: "manual"});
    vivusSecs.play(1);
    setTimeout(() => {vivusSecs.play(-2);}, 700);

    if (time[4] == 0 && time[5] == 0)
      changeMins();
  }

  function changeMins () {
    if (vivusMins)
      vivusMins.play(-1);
    setTimeout(() => { drawMins(); }, 5000);
  }

  function drawMins () {
    svgMins.selectAll("path")
        .data(time.slice(2, 4))
        .attr("d", (d, i) => {
          return "m "+(i*xOffset+xOffset)+","+yOffset  + figPath[d];
        })
      .enter().append("path")
        .attr("style", style)
        .attr("transform", transform)
        .attr("d", (d, i) => {
          return "m "+(i*xOffset+xOffset)+","+yOffset  + figPath[d];
        });

    vivusMins = new Vivus('vivus-mins', {type: 'delayed', duration: 200, start: "manual"});
    vivusMins.play(1);

    if (time[2] == 0 && time[3] == 0)
      changeHrs();
  }

  function changeHrs () {
    if (vivusHrs)
      vivusHrs.play(-1);
    setTimeout(() => { drawHrs(); }, 5000);
  }

  function drawHrs () {
    svgHrs.selectAll("path")
        .data(time.slice(0, 2))
        .attr("d", (d, i) => {
          return "m "+(i*xOffset+xOffset)+","+yOffset  + figPath[d];
        })
      .enter().append("path")
        .attr("style", style)
        .attr("transform", transform)
        .attr("d", (d, i) => {
          return "m "+(i*xOffset+xOffset)+","+yOffset  + figPath[d];
        });

    vivusHrs = new Vivus('vivus-hrs', {type: 'delayed', duration: 200, start: "manual"});
    vivusHrs.play(1);
  }

  this.launch = function () {
    var clock = d3.select("#vivusClock")
      .append("div")
        .attr("class", "clock");

    svgHrs = clock.append("svg")
        .attr("width", "90px")
        .attr("height", "50px")
        .attr("id", "vivus-hrs")
      .append("g");

    svgMins = clock.append("svg")
        .attr("width", "90px")
        .attr("height", "50px")
        .attr("id", "vivus-mins")
      .append("g");

    svgSecs = clock.append("svg")
        .attr("width", "90px")
        .attr("height", "50px")
        .attr("id", "vivus-secs")
      .append("g");

    clock.append("a")
        .attr("href", "https://maxwellito.github.io/vivus/")
        .text("Using Vivus");

    getTime ();
    drawHrs ();
    drawMins();
    drawSecs();
    loop = setInterval(drawSecs, 1000);
  }

  this.stop = function () {
    window.clearInterval(loop);
  }
}
